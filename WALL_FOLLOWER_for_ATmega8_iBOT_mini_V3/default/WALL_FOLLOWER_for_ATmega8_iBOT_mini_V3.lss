
WALL_FOLLOWER_for_ATmega8_iBOT_mini_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000052  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000081  00000000  00000000  000000e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004e  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000af  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cf  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	0c c0       	rjmp	.+24     	; 0x4e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>

int main(void)
{
		       // set PD4 as output bit
	DDRC=0b0000000;            // set PORTC as input port
  38:	14 ba       	out	0x14, r1	; 20
	DDRB=0b00011110;           // PB1, PB2, PB3, PB4 as output port
  3a:	8e e1       	ldi	r24, 0x1E	; 30
  3c:	87 bb       	out	0x17, r24	; 23

		if((rs==0b0000000))    //check  right sensor status for OFF 
		{

			
			PORTB=0b00010000;  //right turn
  3e:	90 e1       	ldi	r25, 0x10	; 16
		
		}
		
		else
			
			PORTB=0b00000010;  //left turn
  40:	82 e0       	ldi	r24, 0x02	; 2
	{
	
	rs=(PINC&0b0000001);       //acquire only right sensor status connected at PC0
			

		if((rs==0b0000000))    //check  right sensor status for OFF 
  42:	98 99       	sbic	0x13, 0	; 19
  44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
		{

			
			PORTB=0b00010000;  //right turn
  46:	98 bb       	out	0x18, r25	; 24
  48:	fc cf       	rjmp	.-8      	; 0x42 <__SREG__+0x3>
		
		}
		
		else
			
			PORTB=0b00000010;  //left turn
  4a:	88 bb       	out	0x18, r24	; 24
  4c:	fa cf       	rjmp	.-12     	; 0x42 <__SREG__+0x3>

0000004e <_exit>:
  4e:	f8 94       	cli

00000050 <__stop_program>:
  50:	ff cf       	rjmp	.-2      	; 0x50 <__stop_program>
